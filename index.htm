<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Art Gallery Showcase - Demo</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@900&display=swap" rel="stylesheet"> <style>
        /* General Custom styles */
        body {
            font-family: 'Open Sans', sans-serif;
            color: #333; /* Default text color */
            line-height: 1.6;
        }
        h1, h2, h3, h4, h5, h6 {
            font-family: 'Playfair Display', serif;
            color: #1a202c; /* Darker color for headings */
        }
        .gallery-item {
            overflow: hidden; /* Ensures image doesn't overflow border-radius */
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
        }
        .gallery-item img {
            transition: transform 0.5s ease-in-out;
        }
        .gallery-item:hover img {
            transform: scale(1.05); /* Slightly zoom image on hover */
        }
        .gallery-item:hover {
             box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2); /* Add shadow on hover */
        }

        /* Mini-Game Specific Styles */
        #mini-game {
            background: linear-gradient(45deg, #ff00ff, #00ffff, #ffff00); /* Neon gradient background */
            color: #fff; /* White text for contrast */
            font-family: 'Press Start 2P', cursive; /* Arcade font */
            text-shadow: 0 0 5px #fff, 0 0 10px #fff, 0 0 15px #0ff, 0 0 20px #0ff, 0 0 25px #0ff, 0 0 30px #0ff, 0 0 35px #0ff; /* Neon text shadow */
        }

        #mini-game h2 {
            font-family: 'Press Start 2P', cursive; /* Ensure game heading uses arcade font */
            color: #fff; /* White heading */
             text-shadow: 0 0 5px #fff, 0 0 10px #fff, 0 0 15px #0ff, 0 0 20px #0ff, 0 0 25px #0ff, 0 0 30px #0ff, 0 0 35px #0ff; /* Neon text shadow */
        }

        .game-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(50px, 1fr)); /* Responsive grid of squares */
            gap: 10px; /* Space between squares */
            max-width: 400px; /* Max width for the game area */
            margin: 20px auto; /* Center the grid */
        }

        .game-square {
            width: 50px;
            height: 50px;
            background-color: rgba(255, 255, 255, 0.2); /* Semi-transparent default */
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.2s ease-in-out, transform 0.1s ease-in-out;
            box-shadow: 0 0 5px rgba(255, 255, 255, 0.5); /* Subtle initial shadow */
        }

        .game-square:hover {
            transform: scale(1.05); /* Slight scale on hover */
        }

        /* Neon Colors for the game squares */
        .color-1 { background-color: #ff00ff; box-shadow: 0 0 5px #ff00ff, 0 0 10px #ff00ff, 0 0 15px #ff00ff; } /* Magenta */
        .color-2 { background-color: #00ffff; box-shadow: 0 0 5px #00ffff, 0 0 10px #00ffff, 0 0 15px #00ffff; } /* Cyan */
        .color-3 { background-color: #ffff00; box-shadow: 0 0 5px #ffff00, 0 0 10px #ffff00, 0 0 15px #ffff00; } /* Yellow */
        .color-4 { background-color: #00ff00; box-shadow: 0 0 5px #00ff00, 0 0 10px #00ff00, 0 0 15px #00ff00; } /* Green */
        .color-5 { background-color: #ff8000; box-shadow: 0 0 5px #ff8000, 0 0 10px #ff8000, 0 0 15px #ff8000; } /* Orange */

         /* Style for game buttons */
        .game-button {
            font-family: 'Press Start 2P', cursive;
            padding: 10px 20px;
            border-radius: 5px;
            background-color: #fff;
            color: #333;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.1s ease;
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
            margin-top: 20px;
            text-shadow: none; /* Remove neon shadow from button text */
        }

        .game-button:hover {
            background-color: #eee;
            transform: translateY(-2px);
        }

        /* Reveal on Scroll Styles */
        .reveal-on-scroll {
            opacity: 0;
            transform: translateY(50px); /* Start slightly below its final position */
            transition: opacity 0.6s ease-out, transform 0.6s ease-out; /* Smooth transition */
        }

        .reveal-on-scroll.is-visible {
            opacity: 1;
            transform: translateY(0); /* Move to its final position */
        }

        /* Artistic Impression Section Styles */
        #artistic-impression {
            background: #000; /* Black background */
            color: #fff; /* White text */
            overflow: hidden; /* Hide overflow from SVG animation */
        }

        #artistic-impression .svg-container {
             width: 100%;
             max-width: 1280px; /* Match SVG viewBox width */
             margin: 0 auto; /* Center the container */
             height: 720px; /* Match SVG viewBox height, adjust as needed */
             display: flex;
             justify-content: center;
             align-items: center;
        }

        #artistic-impression svg {
            width: 100%; /* Make SVG responsive within its container */
            height: 100%; /* Make SVG responsive within its container */
            font-family: "Montserrat", sans-serif; /* Apply Montserrat font */
            font-weight: 900;
            font-size: 150px; /* Adjust font size as needed for layout */
            overflow: visible; /* Allow text to extend beyond viewBox if needed */
        }

        #artistic-impression .left text { fill: #fff; } /* White text for left mask */
        #artistic-impression .right text { fill: #aaa; } /* Gray text for right mask */


    </style>
</head>
<body class="bg-gray-100">

    <header class="bg-white shadow-md">
        <div class="container mx-auto px-6 py-4 flex justify-between items-center">
            <a href="#" class="text-2xl font-bold text-gray-800">Gallery Name</a>

            <nav class="hidden md:flex space-x-6">
                <a href="#gallery" class="text-gray-600 hover:text-gray-800 transition duration-300">Gallery</a>
                <a href="#exhibitions" class="text-gray-600 hover:text-gray-800 transition duration-300">Exhibitions</a>
                 <a href="#mini-game" class="text-gray-600 hover:text-gray-800 transition duration-300">Mini Game</a>
                 <a href="#artistic-impression" class="text-gray-600 hover:text-gray-800 transition duration-300">Artistic Impression</a> <a href="#about" class="text-gray-600 hover:text-gray-800 transition duration-300">About</a>
                <a href="#contact" class="text-gray-600 hover:text-gray-800 transition duration-300">Contact</a>
            </nav>

            <div class="md:hidden">
                <button class="text-gray-600 hover:text-gray-800 focus:outline-none">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path></svg>
                </button>
            </div>
        </div>
    </header>

    <section class="bg-cover bg-center h-96 flex items-center justify-center text-white reveal-on-scroll" style="background-image: url('https://placehold.co/1920x600/60a5fa/ffffff?text=Featured+Artwork+Here');">
        <div class="text-center bg-black bg-opacity-50 p-8 rounded-lg">
            <h1 class="text-4xl md:text-5xl font-bold mb-4">Discover Exquisite Art</h1>
            <p class="text-xl mb-6">Explore our collection and upcoming exhibitions.</p>
            <a href="#gallery" class="bg-white text-gray-800 px-6 py-3 rounded-full font-semibold hover:bg-gray-200 transition duration-300">View Gallery</a>
        </div>
    </section>

    <section id="gallery" class="py-16 bg-white reveal-on-scroll">
        <div class="container mx-auto px-6">
            <h2 class="text-3xl md:text-4xl font-bold text-center mb-12">Our Collection</h2>

            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">

                <div class="gallery-item bg-gray-100 rounded-lg shadow-md cursor-pointer">
                    <img src="https://placehold.co/600x400/e2e8f0/333?text=Artwork+1" alt="Artwork Title 1" class="w-full h-48 object-cover rounded-t-lg">
                    <div class="p-4">
                        <h3 class="text-lg font-semibold mb-1">Artwork Title 1</h3>
                        <p class="text-sm text-gray-600">Artist Name</p>
                    </div>
                </div>

                 <div class="gallery-item bg-gray-100 rounded-lg shadow-md cursor-pointer">
                    <img src="https://placehold.co/600x400/cbd5e0/333?text=Artwork+2" alt="Artwork Title 2" class="w-full h-48 object-cover rounded-t-lg">
                    <div class="p-4">
                        <h3 class="text-lg font-semibold mb-1">Artwork Title 2</h3>
                        <p class="text-sm text-gray-600">Artist Name</p>
                    </div>
                </div>

                <div class="gallery-item bg-gray-100 rounded-lg shadow-md cursor-pointer">
                    <img src="https://placehold.co/600x400/a0aec0/333?text=Artwork+3" alt="Artwork Title 3" class="w-full h-48 object-cover rounded-t-lg">
                    <div class="p-4">
                        <h3 class="text-lg font-semibold mb-1">Artwork Title 3</h3>
                        <p class="text-sm text-gray-600">Artist Name</p>
                    </div>
                </div>

                 <div class="gallery-item bg-gray-100 rounded-lg shadow-md cursor-pointer">
                    <img src="https://placehold.co/600x400/718096/fff?text=Artwork+4" alt="Artwork Title 4" class="w-full h-48 object-cover rounded-t-lg">
                    <div class="p-4">
                        <h3 class="text-lg font-semibold mb-1">Artwork Title 4</h3>
                        <p class="text-sm text-gray-600">Artist Name</p>
                    </div>
                </div>

                <div class="gallery-item bg-gray-100 rounded-lg shadow-md cursor-pointer">
                    <img src="https://placehold.co/600x400/e2e8f0/333?text=Artwork+5" alt="Artwork Title 5" class="w-full h-48 object-cover rounded-t-lg">
                    <div class="p-4">
                        <h3 class="text-lg font-semibold mb-1">Artwork Title 5</h3>
                        <p class="text-sm text-gray-600">Artist Name</p>
                    </div>
                </div>

                 <div class="gallery-item bg-gray-100 rounded-lg shadow-md cursor-pointer">
                    <img src="https://placehold.co/600x400/cbd5e0/333?text=Artwork+6" alt="Artwork Title 6" class="w-full h-48 object-cover rounded-t-lg">
                    <div class="p-4">
                        <h3 class="text-lg font-semibold mb-1">Artwork Title 6</h3>
                        <p class="text-sm text-gray-600">Artist Name</p>
                    </div>
                </div>

                </div>
        </div>
    </section>

    <section id="about" class="py-16 bg-gray-200 reveal-on-scroll">
        <div class="container mx-auto px-6 grid grid-cols-1 md:grid-cols-2 gap-12 items-center">
            <div>
                <h2 class="text-3xl md:text-4xl font-bold mb-6">About Our Gallery</h2>
                <p class="mb-4">Welcome to [Gallery Name], a space dedicated to showcasing contemporary and classic art from around the world. We believe in the power of art to inspire, challenge, and connect people.</p>
                <p class="mb-4">Our collection features a diverse range of mediums and styles, reflecting the vibrant and ever-evolving art landscape. We host regular exhibitions, workshops, and events to engage with the community and support artists.</p>
                <a href="#contact" class="inline-block mt-4 bg-gray-800 text-white px-6 py-3 rounded-full font-semibold hover:bg-gray-700 transition duration-300">Visit Us</a>
            </div>

            <div>
                 <img src="https://placehold.co/600x400/a0aec0/fff?text=Gallery+Interior+or+Exhibition" alt="Gallery Interior" class="rounded-lg shadow-md w-full">
            </div>
        </div>
    </section>

    <section id="mini-game" class="py-16 text-center reveal-on-scroll">
        <div class="container mx-auto px-6">
            <h2 class="text-3xl md:text-4xl font-bold mb-8">Play Our Neon Game!</h2>
            <p class="text-lg mb-8">Click the squares to change their colors and create a dazzling display!</p>

            <div id="game-area" class="game-grid">
                </div>

             <button id="reset-game" class="game-button">Reset Game</button>
        </div>
    </section>

    <section id="artistic-impression" class="py-16 reveal-on-scroll">
        <div class="svg-container">
             <svg viewBox="0 0 1280 720">
                <mask id="maskLeft">
                    <rect x="-50%" width="100%" height="100%" fill="#fff"/>
                </mask>
                <mask id="maskRight">
                    <rect x="50%" width="100%" height="100%" fill="#fff"/>
                </mask>
                <g font-size="150">
                    <g mask="url(#maskLeft)" class="left">
                        <text x="50%" y="300" text-anchor="middle">ARTISTIC</text> </g>
                     <g mask="url(#maskRight)" class="right">
                        <text x="50%" y="300" text-anchor="middle">ARTISTIC</text> </g>
                     <g mask="url(#maskLeft)" class="left">
                        <text x="50%" y="450" text-anchor="middle">IMPRESSION</text> </g>
                     <g mask="url(#maskRight)" class="right">
                        <text x="50%" y="450" text-anchor="middle">IMPRESSION</text> </g>
                </g>
            </svg>
        </div>
    </section>


     <section id="contact" class="py-16 bg-white reveal-on-scroll">
        <div class="container mx-auto px-6 text-center">
            <h2 class="text-3xl md:text-4xl font-bold mb-8">Get in Touch</h2>
            <p class="text-lg mb-4">Have questions or want to inquire about an artwork?</p>
            <p class="text-lg mb-8">Email: info@galleryname.com | Phone: (123) 456-7890</p>
            <a href="mailto:info@galleryname.com" class="inline-block bg-blue-500 text-white px-8 py-3 rounded-full font-semibold hover:bg-blue-600 transition duration-300">Email Us</a>
        </div>
    </section>


    <footer class="bg-gray-800 text-gray-300 py-8 reveal-on-scroll">
        <div class="container mx-auto px-6 text-center">
            <p>&copy; 2025 Gallery Name. All rights reserved.</p>
            <div class="flex justify-center space-x-6 mt-4">
                <a href="#" class="text-gray-400 hover:text-white transition duration-300">Privacy Policy</a>
                <a href="#" class="text-gray-400 hover:text-white transition duration-300">Terms of Service</a>
            </div>
        </div>
    </footer>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/Draggable.min.js"></script> <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/MotionPathPlugin.min.js"></script> <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/ScrollTrigger.min.js"></script> <script>
        // Placeholder for potential JavaScript interactions
        // For example, you could add a modal here to show larger artwork images when clicked.

        // Example: Add click listener to gallery items (basic example)
        document.querySelectorAll('.gallery-item').forEach(item => {
            item.addEventListener('click', () => {
                const artworkTitle = item.querySelector('h3').textContent;
                const artistName = item.querySelector('p').textContent;
                const imageUrl = item.querySelector('img').src;

                // In a real application, you would open a modal here
                console.log(`Clicked on: ${artworkTitle} by ${artistName}`);
                // alert(`Imagine a modal showing ${artworkTitle} by ${artistName} here!`); // Use a custom message box instead of alert
                 showMessage(`You clicked on "${artworkTitle}" by ${artistName}. Imagine a detailed view here!`);
            });
        });

         // Simple custom message box function (replaces alert)
         function showMessage(message) {
            const messageBox = document.createElement('div');
            messageBox.classList.add(
                'fixed', 'top-1/2', 'left-1/2', 'transform', '-translate-x-1/2', '-translate-y-1/2',
                'bg-white', 'p-6', 'rounded-lg', 'shadow-xl', 'z-50', 'text-center',
                'max-w-sm', 'w-full', 'text-gray-800'
            );
            messageBox.innerHTML = `
                <p class="text-lg font-semibold mb-4">${message}</p>
                <button class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600" onclick="this.parentElement.remove()">Close</button>
            `;
            document.body.appendChild(messageBox);
        }


        // Mini-Game JavaScript Logic
        const gameArea = document.getElementById('game-area');
        const resetButton = document.getElementById('reset-game');
        const numberOfSquares = 40; // Number of squares in the game grid
        const colors = ['color-1', 'color-2', 'color-3', 'color-4', 'color-5']; // CSS classes for neon colors

        // Function to create the game grid
        function createGameGrid() {
            gameArea.innerHTML = ''; // Clear existing squares
            for (let i = 0; i < numberOfSquares; i++) {
                const square = document.createElement('div');
                square.classList.add('game-square');
                // Optionally add a random initial color
                // const randomColorClass = colors[Math.floor(Math.random() * colors.length)];
                // square.classList.add(randomColorClass);
                gameArea.appendChild(square);
            }
        }

        // Function to handle square clicks
        function handleSquareClick(event) {
            const clickedSquare = event.target;
            if (clickedSquare.classList.contains('game-square')) {
                // Find the current color class
                let currentColorClass = null;
                for (const colorClass of colors) {
                    if (clickedSquare.classList.contains(colorClass)) {
                        currentColorClass = colorClass;
                        break;
                    }
                }

                // Determine the next color class
                let nextColorClass;
                if (currentColorClass) {
                    const currentIndex = colors.indexOf(currentColorClass);
                    const nextIndex = (currentIndex + 1) % colors.length;
                    nextColorClass = colors[nextIndex];
                    clickedSquare.classList.remove(currentColorClass); // Remove current
                } else {
                    // If no color class, add the first one
                    nextColorClass = colors[0];
                }

                // Add the next color class
                clickedSquare.classList.add(nextColorClass);
            }
        }

        // Initialize the game grid on page load
        window.addEventListener('load', () => {
            createGameGrid();
        });

        // Add event listener to the game area for clicks (event delegation)
        gameArea.addEventListener('click', handleSquareClick);

        // Add event listener for the reset button
        resetButton.addEventListener('click', () => {
            createGameGrid(); // Recreate the grid to reset colors
        });


        // Reveal on Scroll JavaScript Logic
        const sectionsToReveal = document.querySelectorAll('.reveal-on-scroll');

        const revealObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                // If the element is in the viewport
                if (entry.isIntersecting) {
                    entry.target.classList.add('is-visible'); // Add the visible class
                    observer.unobserve(entry.target); // Stop observing once visible
                }
            });
        }, {
            threshold: 0.1 // Trigger when 10% of the element is visible
        });

        // Observe each section that needs to be revealed
        sectionsToReveal.forEach(section => {
            revealObserver.observe(section);
        });


        // Artistic Impression SVG Animation Logic
        // Ensure GSAP is loaded before this script runs
        if (typeof gsap !== 'undefined') {
            const artisticImpressionSection = document.getElementById('artistic-impression');
            const svgElement = artisticImpressionSection.querySelector('svg');
            const leftTexts = artisticImpressionSection.querySelectorAll('.left text');
            const rightTexts = artisticImpressionSection.querySelectorAll('.right text');

            // Create the main animation timeline
            const tl = gsap.timeline({
                defaults: {
                    duration: 2,
                    yoyo: true,
                    ease: 'power2.inOut'
                }
            });

            // Add the animation for the left and right text groups
            tl.fromTo(artisticImpressionSection.querySelectorAll('.left, .right'), {
                // svgOrigin: '640 500', // Adjust origin based on your SVG's center/desired pivot
                skewY: (i) => [-30, 15][i],
                scaleX: (i) => [0.6, 0.85][i],
                x: 200
            }, {
                skewY: (i) => [-15, 30][i],
                scaleX: (i) => [0.85, 0.6][i],
                x: -200
            })
            .play(.5); // Start the animation slightly into its timeline

            // Create a separate timeline for the text entry animation
            const tl2 = gsap.timeline();

             // Animate the entry of each text line
            artisticImpressionSection.querySelectorAll('text').forEach((t, i) => {
                 // Determine the x position based on text anchor and container width
                 // Since text-anchor="middle", x="50%" means the middle of the text is at 50% of the SVG width.
                 // We need to calculate the starting position to slide in correctly.
                 // This requires a bit more complex calculation or a simpler animation approach.
                 // Let's use a simpler x animation relative to the current position for now.
                 // A more precise calculation would involve getting the text element's bounding box.

                 // Using a simpler relative animation based on the original example's logic
                 // The original example used xPercent and a fixed x value. Let's adapt that.
                 // Assuming the text is roughly centered, we can animate xPercent from a large negative value.
                 // The original example's x: 700 and x: 575 seem specific to their SVG/text size.
                 // Let's try animating xPercent from -100 to 0, which is a standard slide-in.
                 // We might need to adjust the duration and ease.

                 // A simpler approach: animate the x attribute directly if possible, or use a wrapper.
                 // Given the mask setup, animating the text elements directly is the intended approach.
                 // Let's adapt the original animation parameters but target the text elements within this section.

                tl2.add(
                    gsap.fromTo(t, {
                        // Adjust initial x position based on SVG width and text size
                        // This is a simplified approach; precise centering on entry is complex with masks.
                        // The original example's values (xPercent: -100, x: 700) are likely tuned for their specific text and SVG size.
                        // Let's try a simpler slide from off-screen left to the current position.
                         xPercent: -100, // Start off-screen left relative to its current position
                         opacity: 0 // Start invisible
                    }, {
                        duration: 1,
                        xPercent: 0, // End at its current position
                        opacity: 1, // Fade in
                        ease: 'sine.inOut'
                    })
                    // Stagger the animation slightly for each text line
                    , i * 0.2); // Stagger by 0.2 seconds per line
            });


            // Control animation progress based on mouse movement
            // This logic needs to be applied when the user is interacting with the specific section,
            // or globally if the animation should always respond to mouse position.
            // Let's apply it globally for simplicity, as in the example.
            // We need to ensure the GSAP timelines are accessible globally or within a scope
            // that the pointermove handler can access.

             // Make timelines accessible to the pointermove handler
             window.artisticImpressionTimeline1 = tl;
             window.artisticImpressionTimeline2 = tl2;


        } else {
            console.error("GSAP library not loaded. Artistic Impression animation will not work.");
        }


        // Global pointermove handler to control the SVG animation
        // This should be outside the window.onload or specific section logic
        // to ensure it's attached once.
        window.addEventListener('pointermove', (e) => {
             // Check if the timelines exist before trying to control them
            if (window.artisticImpressionTimeline1 && window.artisticImpressionTimeline2) {
                 // Calculate the progress based on mouse X position across the viewport width
                const progress = e.clientX / window.innerWidth;

                 // Use gsap.to to smoothly transition the timelines' progress
                gsap.to([window.artisticImpressionTimeline1, window.artisticImpressionTimeline2], {
                    duration: 0.5, // Shorter duration for snappier response
                    ease: 'power4',
                    progress: progress,
                    overwrite: 'auto' // Kill conflicting tweens
                });
            }
        });


    </script>

</body>
</html>
