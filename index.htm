<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Art Gallery Showcase - Demo</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Instrument+Sans:wght@400..700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Input+Mono&display=swap" rel="stylesheet">

    <style>
        /* General Custom styles */
        body {
            font-family: 'Open Sans', sans-serif;
            color: #333; /* Default text color */
            line-height: 1.6;
            /* Added transition for light/dark mode toggle */
            transition: background-color 0.3s ease, color 0.3s ease;
            background-color: var(--background-color); /* Use CSS variable for background */
        }
        h1, h2, h3, h4, h5, h6 {
            font-family: 'Playfair Display', serif;
            color: #1a202c; /* Darker color for headings */
        }
        .gallery-item {
            overflow: hidden; /* Ensures image doesn't overflow border-radius */
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
        }
        .gallery-item img {
            transition: transform 0.5s ease-in-out;
        }
        .gallery-item:hover img {
            transform: scale(1.05); /* Slightly zoom image on hover */
        }
        .gallery-item:hover {
             box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2); /* Add shadow on hover */
        }

        /* Mini-Game Specific Styles */
        #mini-game {
            background: linear-gradient(45deg, #ff00ff, #00ffff, #ffff00); /* Neon gradient background */
            color: #fff; /* White text for contrast */
            font-family: 'Press Start 2P', cursive; /* Arcade font */
            text-shadow: 0 0 5px #fff, 0 0 10px #fff, 0 0 15px #0ff, 0 0 20px #0ff, 0 0 25px #0ff, 0 0 30px #0ff, 0 0 35px #0ff; /* Neon text shadow */
        }

        #mini-game h2 {
            font-family: 'Press Start 2P', cursive; /* Ensure game heading uses arcade font */
            color: #fff; /* White heading */
             text-shadow: 0 0 5px #fff, 0 0 10px #fff, 0 0 15px #0ff, 0 0 20px #0ff, 0 0 25px #0ff, 0 0 30px #0ff, 0 0 35px #0ff; /* Neon text shadow */
        }

        .game-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(50px, 1fr)); /* Responsive grid of squares */
            gap: 10px; /* Space between squares */
            max-width: 400px; /* Max width for the game area */
            margin: 20px auto; /* Center the grid */
        }

        .game-square {
            width: 50px;
            height: 50px;
            background-color: rgba(255, 255, 255, 0.2); /* Semi-transparent default */
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.2s ease-in-out, transform 0.1s ease-in-out;
            box-shadow: 0 0 5px rgba(255, 255, 255, 0.5); /* Subtle initial shadow */
        }

        .game-square:hover {
            transform: scale(1.05); /* Slight scale on hover */
        }

        /* Neon Colors for the game squares */
        .color-1 { background-color: #ff00ff; box-shadow: 0 0 5px #ff00ff, 0 0 10px #ff00ff, 0 0 15px #ff00ff; } /* Magenta */
        .color-2 { background-color: #00ffff; box-shadow: 0 0 5px #00ffff, 0 0 10px #00ffff, 0 0 15px #00ffff; } /* Cyan */
        .color-3 { background-color: #ffff00; box-shadow: 0 0 5px #ffff00, 0 0 10px #ffff00, 0 0 15px #ffff00; } /* Yellow */
        .color-4 { background-color: #00ff00; box-shadow: 0 0 5px #00ff00, 0 0 10px #00ff00, 0 0 15px #00ff00; } /* Green */
        .color-5 { background-color: #ff8000; box-shadow: 0 0 5px #ff8000, 0 0 10px #ff8000, 0 0 15px #ff8000; } /* Orange */

         /* Style for game buttons */
        .game-button {
            font-family: 'Press Start 2P', cursive;
            padding: 10px 20px;
            border-radius: 5px;
            background-color: #fff;
            color: #333;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.1s ease;
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
            margin-top: 20px;
            text-shadow: none; /* Remove neon shadow from button text */
        }

        .game-button:hover {
            background-color: #eee;
            transform: translateY(-2px);
        }

        /* Reveal on Scroll Styles - Made more dramatic */
        .reveal-on-scroll {
            opacity: 0;
            transform: translateY(80px); /* Increased starting position */
            transition: opacity 0.8s ease-out, transform 0.8s ease-out; /* Increased transition duration */
        }

        .reveal-on-scroll.is-visible {
            opacity: 1;
            transform: translateY(0); /* Move to its final position */
        }

        /* Artistic Impression Section Styles (Original SVG Animation) */
        #artistic-impression {
            background: #000; /* Black background */
            color: #fff; /* White text */
            overflow: hidden; /* Hide overflow from SVG animation */
        }

        #artistic-impression .svg-container {
             width: 100%;
             max-width: 1280px; /* Match SVG viewBox width */
             margin: 0 auto; /* Center the container */
             height: 720px; /* Match SVG viewBox height, adjust as needed */
             display: flex;
             justify-content: center;
             align-items: center;
        }

        #artistic-impression svg {
            width: 100%; /* Make SVG responsive within its container */
            height: 100%; /* Make SVG responsive within its container */
            font-family: "Montserrat", sans-serif; /* Apply Montserrat font */
            font-weight: 900;
            font-size: 150px; /* Adjust font size as needed for layout */
            overflow: visible; /* Allow text to extend beyond viewBox if needed */
        }

        #artistic-impression .left text { fill: #fff; } /* White text for left mask */
        #artistic-impression .right text { fill: #aaa; } /* Gray text for right mask */


        /* Styles for the New Interactive Elements Section */
        #interactive-art-elements {
            background-color: var(--background-color); /* Use theme background */
            color: var(--text-color-top); /* Use theme text color */
            font-family: "Instrument Sans", sans-serif; /* Apply Instrument Sans */
            transition: background-color 0.3s ease, color 0.3s ease;
            padding-top: 4rem; /* Add some padding */
            padding-bottom: 4rem; /* Add some padding */
        }

        #interactive-art-elements .section-container {
             width: 100%;
             max-width: 1200px; /* Container width */
             margin: 0 auto; /* Center the container */
             padding: 0 1.5rem; /* Padding */
        }

         #interactive-art-elements h2 {
             font-family: 'Playfair Display', serif; /* Use the site's heading font */
             color: var(--text-color-bottom); /* Use a theme text color */
             text-align: center;
             margin-bottom: 2rem;
        }

        #interactive-art-elements p {
             text-align: center;
             margin-bottom: 3rem;
             color: var(--text-color-top);
        }


        /* Styles from the provided example */
        :root {
            --background-color-light: hsla(230, 80%, 98%, 1);
            --toggle-light: hsla(230, 25%, 10%, 1);
            --line-light: hsla(230, 35%, 92.5%, 1);
            --dot-light: hsla(230, 25%, 75%, 1);
            --text-top-light: hsla(240, 25%, 10%, 1);
            --text-bottom-light: hsla(240, 25%, 25%, 1);
            --text-circle-light: hsla(240, 25%, 25%, 1);
            --red: #ff0000; /* Define red variable */
            --yellow: #ffff00; /* Define yellow variable */
            --black: #000; /* Define black variable */
            --white: #fff; /* Define white variable */


            --background-color-dark: hsla(230, 55%, 4%, 1);
            --toggle-dark: hsla(230, 25%, 75%, 1);
            --line-dark: hsla(230, 25%, 15%, .75);
            --dot-dark: hsla(230, 25%, 90%, 1);
            --text-top-dark: hsla(240, 60%, 90%, 1);
            --text-bottom-dark: hsla(240, 60%, 95%, 1);
            --text-circle-dark: hsla(240, 60%, 95%, .15);

            color-scheme: light;

            --x: 50%;
            --y: 50%;
        }

        html {
            --background-color: var(--background-color-light);
            --toggle-color: var(--toggle-light);
            --line-color: var(--line-light);
            --dot-color: var(--dot-light);
            --text-color-top: var(--text-top-light);
            --text-color-bottom: var(--text-color-bottom-light);
            --text-color-circle: var(--text-color-circle-light);
        }

        html.dark {
            color-scheme: dark;

            --background-color: var(--background-color-dark);
            --toggle-color: var(--toggle-dark);
            --line-color: var(--line-dark);
            --dot-color: var(--dot-dark);
            --text-color-top: var(--text-top-dark);
            --text-color-bottom: var(--text-color-bottom-dark);
            --text-color-circle: var(--text-color-circle-dark);
        }

        /* Moved body background/color/transition to general styles */
        /* main styles */
        #interactive-art-elements main {
            width: 100%;
        }

        #interactive-art-elements section {
            width: clamp(360px, 60vw, 780px);
            aspect-ratio: 1.55 / .5;
            min-height: 200px;
            margin: auto;
            text-align: center;
            place-items: center;
            display: grid;
            position: relative;

            .dot {
                height: 5px;
                width: 5px;
                background-color: var(--dot-color);
                position: absolute;
                z-index: 1;
                border-radius: 50%;
                box-shadow: 0 0 0 3px var(--background-color);

                &:nth-child(1) {
                    top: -2px;
                    left: -2px;
                }

                &:nth-child(2) {
                    top: -2px;
                    right: -2px;
                }

                &:nth-child(3) {
                    bottom: -2px;
                    right: -2px;
                }

                &:nth-child(4) {
                    bottom: -2px;
                    left: -2px;
                }
            }

            &:before,
            &:after {
                content: '';
                position: absolute;
                height: 100%; /* Adjusted to 100% of parent section height */
                width: 1px;
                background-color: var(--line-color);
            }

            &:before {
                left: 0;
            }

            &:after {
                right: 0;
            }
        }

        #interactive-art-elements main hr {
            border: none;
            height: 1px;
            width: 100%;
            margin: 0;
            background-color: var(--line-color);
        }

        #interactive-art-elements h1 {
            font-family: "Instrument Sans", sans-serif; /* Use Instrument Sans for this h1 */
            font-optical-sizing: auto;
            font-weight: 700;
            font-style: normal;
            font-variation-settings: "wdth" 95;
            font-size: clamp(32px, 6vw, 68px);
            line-height: 1.05;
            margin: 0;
            text-align: left;
            /* Use theme text colors */
             background-image: linear-gradient(180deg, var(--text-color-top) 0%, var(--text-color-bottom) 100%);
             background-clip: text;
             -webkit-background-clip: text;
             -webkit-text-fill-color: transparent;
        }

        /* Adjusted h1 span and strong styles to apply directly to h1 and its children */
        #interactive-art-elements h1 strong {
            display: inline-block;
            color: transparent;
            background-image: url('https://assets.codepen.io/165585/circle-bg_1.svg'); /* Keep example background image */
            background-color: var(--text-color-circle);
            background-size: 400px;
            background-position: 50% 80%;
            background-blend-mode: overlay;
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            letter-spacing: 0.015em;
        }

        /* View Transition Styles (apply globally) */
        ::view-transition-new(root) {
            animation: reveal-in 0.5s ease-in-out forwards;
            z-index: 1;
            mix-blend-mode: normal;
        }

        ::view-transition-old(root) {
            animation: reveal-out 0.5s ease-in-out forwards;
            animation-delay: .5s;
            z-index: 0;
            mix-blend-mode: normal;
        }

        ::view-transition-image-pair(root) {
            isolation: isolate;
        }

        @keyframes reveal-in {
            from {
                clip-path: circle(0% at var(--x) var(--y));
            }
            to {
                clip-path: circle(150% at var(--x) var(--y));
            }
        }

        @keyframes reveal-out {
            from {
                clip-path: circle(150% at var(--x) var(--y));
            }
            to {
                clip-path: circle(0% at var(--x) var(--y));
            }
        }


        /* Toggle Styles (apply globally) */
        .toggle {
            position: fixed;
            top: 12px;
            left: 50%;
            transform: translateX(-50%) scale(.5);
            cursor: pointer;
            z-index: 100; /* Ensure toggle is above other content */
        }

        .toggle input {
            display: none;
        }

        .toggle input + div {
            border-radius: 50%;
            width: 36px;
            height: 36px;
            position: relative;
            box-shadow: inset 16px -16px 0 0 var(--toggle-color);
            transform: scale(1) rotate(-2deg);
            transition: box-shadow .5s ease 0s, transform .4s ease .1s;
        }

        .toggle input + div:before {
            content: '';
            width: inherit;
            height: inherit;
            border-radius: inherit;
            position: absolute;
            left: 0;
            top: 0;
            background: light-dark(transparent, var(--toggle-color));
            transition: background .3s ease;
        }

        .toggle input + div:after {
            content: '';
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin: -4px 0 0 -4px;
            position: absolute;
            top: 50%;
            left: 50%;
            box-shadow: 0 -23px 0 var(--toggle-color),
                0 23px 0 var(--toggle-color),
                23px 0 0 var(--toggle-color),
                -23px 0 0 var(--toggle-color),
                15px 15px 0 var(--toggle-color),
                -15px 15px 0 var(--toggle-color),
                15px -15px 0 var(--toggle-color),
                -15px -15px 0 var(--toggle-color);
            transform: scale(0);
            transition: all .3s ease;
        }

        .toggle input:checked + div {
            box-shadow: inset 32px -32px 0 0 var(--background-color);
            transform: scale(.5) rotate(0deg);
            transition: transform .3s ease .1s, box-shadow .2s ease 0s;
        }

        .toggle input:checked + div:before {
            background: var(--toggle-color);
            transition: background .3s ease .1s;
        }

        .toggle input:checked + div:after {
            transform: scale(1.5);
            transition: transform .5s ease .15s;
        }

        /* Styles for the provided draggable elements */
        #interactive-art-elements .grid::before {
            content: "";
            pointer-events: none;
            position: absolute;
            z-index: 0;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(-90deg, rgba(255,255,255,.05) 1px, transparent 1px), linear-gradient(rgba(255,255,255,.05) 1px, transparent 1px), linear-gradient(-90deg, rgba(255,255,255,.04) 1px, transparent 1px), linear-gradient(rgba(255,255,255,.04) 1px, transparent 1px), linear-gradient(transparent 3px, var(--black) 3px, var(--black) calc(var(--one-cell) - 2px), transparent calc(var(--one-cell) - 2px)), linear-gradient(-90deg, var(--white) 1px, transparent 1px), linear-gradient(-90deg, transparent 3px, var(--black) 3px, var(--black) calc(var(--one-cell) - 2px), transparent calc(var(--one-cell) - 2px)), linear-gradient(var(--white) 1px, transparent 1px), var(--black);
            background-size: calc(var(--one-cell) / 10) calc(var(--one-cell) / 10), calc(var(--one-cell) / 10) calc(var(--one-cell) / 10), var(--one-cell) var(--one-cell), var(--one-cell) var(--one-cell), var(--one-cell) var(--one-cell), var(--one-cell) var(--one-cell), var(--one-cell) var(--one-cell), var(--one-cell) var(--one-cell);
            background-position: calc(var(--one-cell) * .25) -1px;
        }

        #interactive-art-elements #draggables {
            overflow: hidden;
            position: relative;
            display: flex;
            flex-grow: 1;
            flex-wrap: wrap;
            justify-content: flex-start;
            align-items: flex-start;
            padding: 0 0 var(--one-cell) 0;
            transform-origin: 50% 0% 0px;
            will-change: transform;
        }

        #interactive-art-elements .example {
            position: relative;
            min-width: calc(var(--one-cell) * 1);
            margin: calc(var(--one-cell) * .25);
            margin-bottom: 0;
        }

        @media (min-width: 500px) {
            #interactive-art-elements #draggables.grid {
                padding-bottom: calc(var(--one-cell) * 1);
            }
            #interactive-art-elements #draggables.grid:before {
                width: calc(100% + calc(var(--one-cell) * .5));
                left: calc(var(--one-cell) * -.5);
                background-position: calc(var(--one-cell) * 1) -1px;
            }
            #interactive-art-elements .example {
                margin: calc(var(--one-cell) * .5);
                margin-bottom: 0;
            }
        }

        #interactive-art-elements .example h2 {
            font-family: 'Input Mono', monospace; /* Use Input Mono */
            height: calc(var(--one-cell) * .5);
            padding-top: 15px;
            padding-bottom: 15px;
        }

        #interactive-art-elements .example-content {
            display: flex;
            justify-content: flex-start;
            width: 100%;
        }

        #interactive-art-elements .example-content-vertical {
            flex-direction: column;
        }

        #interactive-art-elements .draggable {
            display: flex;
            position: relative;
            z-index: 100;
        }

        #interactive-art-elements .draggable::after {
            content: "";
            display: block;
            pointer-events: none;
            position: absolute;
            top: 50%;
            left: 50%;
            width: 20px;
            height: 20px;
            margin-left: -10px;
            margin-top: -10px;
            background-size: 5px 5px;
            background-image:
                radial-gradient(circle at center, var(--black) 1px, transparent 0),
                radial-gradient(circle at center, var(--black) 1px, transparent 0);
        }

        #interactive-art-elements .carousel .draggable {
            padding-top: 1rem;
            padding-left: 1rem;
            color: var(--black);
        }

        #interactive-art-elements .rectangle {
            width: calc(var(--one-cell) * 2);
            height: calc(var(--one-cell) * 1);
            background-color: var(--red);
            border-radius: 20px;
        }

        #interactive-art-elements .square {
            width: calc(var(--one-cell) * .8);
            height: calc(var(--one-cell) * .8);
            background-color: var(--red);
            border-radius: 20px;
        }

        #interactive-art-elements .bar {
            overflow: hidden;
            width: calc(var(--one-cell) * .1);
            height: calc(var(--one-cell) * .8);
            background-color: var(--red);
            border-radius: 20px;
        }

        #interactive-art-elements .margin {
            position: relative;
            z-index: 1;
            box-shadow: 0 0 0 1px var(--border-color);
            border-radius: 20px;
            padding: 10px;
        }

        #interactive-art-elements .margin:before {
            content: "";
            pointer-events: none;
            display: block;
            position: absolute;
            z-index: 2;
            left: 10px;
            top: 10px;
            width: calc(100% - 20px);
            height: calc(100% - 20px);
            border: 1px dashed rgba(255,255,255,.25);
            border-radius: 10px;
        }

        #interactive-art-elements .margin-overlay {
            position: absolute;
            pointer-events: none;
            z-index: 3;
            top: calc(var(--one-cell) * .5);
            left: 0;
            width: 100%;
            height: calc(100% - calc(var(--one-cell) * .5));
        }

        #interactive-art-elements .margin-overlay + .margin:before {
            display: none;
        }

        #interactive-art-elements .margin-overlay + .margin {
            box-shadow: none;
        }

        #interactive-art-elements .margin .draggable {
            background-color: var(--red);
            border-radius: 10px;
        }

        #interactive-art-elements .range-x {
            width: calc(var(--one-cell) * 3);
            height: calc(var(--one-cell) * 1);
        }

        #interactive-art-elements .range-y {
            width: calc(var(--one-cell) * 1);
            height: calc(var(--one-cell) * 3);
        }

        #interactive-art-elements .dynamic {
            width: calc(var(--one-cell) * 3);
            height: calc(var(--one-cell) * 1);
        }

        #interactive-art-elements .dynamic .square,
        #interactive-art-elements .dynamic .bar {
            position: absolute;
            left: 0;
            top: 0;
        }

        #interactive-art-elements .dynamic .bar-left {
            left: 0;
            right: auto;
            border-radius: 10px 0 0 10px;
        }

        #interactive-art-elements .dynamic .bar-right {
            left: auto;
            right: 0;
            border-radius: 0 10px 10px 0;
        }

        #interactive-art-elements .container {
            overflow: hidden;
            width: calc((var(--one-cell) * 3));
            height: calc((var(--one-cell) * 3));
        }

        #interactive-art-elements .container.overflow {
            overflow: auto;
            overscroll-behavior: contain;
        }

        #interactive-art-elements #fixed-container {
            width: calc((var(--one-cell) * 2));
            height: calc((var(--one-cell) * 1));
            box-shadow: 0 0 0 1px var(--border-color);
            border-radius: 20px;
        }

        #interactive-art-elements #fixed {
            position: fixed; /* Keep fixed positioning relative to viewport */
            top: calc((var(--one-cell) * .75));
            left: calc((var(--one-cell) * .25));
            box-shadow: 0 0 1rem 0 rgba(0,0,0,.2);
        }

        @media (min-width: 500px) {
            #interactive-art-elements #fixed {
                position: fixed;
                top: calc((var(--one-cell) * 1));
                left: calc((var(--one-cell) * .5));
            }
        }

        #interactive-art-elements #container-no-scroll {
            overflow: visible;
            z-index: 2;
        }

        #interactive-art-elements .transformed-example {
            transform: scaleY(.75) scaleX(.75) rotate(-40deg) skew(15deg);
        }

        #interactive-art-elements .transformed-example .margin-overlay {
            top: 0;
            width: calc((var(--one-cell) * 3));
            height: calc((var(--one-cell) * 3));
        }

        #interactive-art-elements .scroller,
        #interactive-art-elements .scroller:before {
            width: calc((var(--one-cell) * 8) - 20px);
            height: calc((var(--one-cell) * 8) - 20px);
        }

        #interactive-art-elements .list {
            position: relative;
            overflow: visible;
            width: 100%;
            height: calc((var(--one-cell) * 3) - 20px);
        }

        #interactive-art-elements .list-item {
            position: absolute;
            width: 100%;
            height: calc(var(--one-cell) * .5);
        }

        #interactive-art-elements .carousel {
            display: flex;
            position: relative;
            overflow: visible;
            width: 100%;
            height: calc((var(--one-cell) * 3) - 20px);
        }

        #interactive-art-elements .carousel-buttons {
            position: fixed;
            bottom: .5rem;
            left: 2rem;
            right: 2rem;
            z-index: 1;
            display: flex;
            justify-content: space-between;
        }

        #interactive-art-elements .button {
            padding: .25em .5em;
            border-radius: 10px;
            cursor: pointer;
        }

        #interactive-art-elements .carousel-item {
            width: calc((var(--one-cell) * 3) - 20px);
            height: calc((var(--one-cell) * 3) - 20px);
        }

        #interactive-art-elements .carousel-item:nth-child(even),
        #interactive-art-elements .list-item:nth-child(even) {
            background-color: var(--yellow);
        }

        #interactive-art-elements .carousel-link {
            display: block;
            position: absolute;
            top: 20px;
            left: 20px;
            right: 20px;
            bottom: 20px;
            border: 2px dotted var(--red);
        }

        #interactive-art-elements #snap-carousel {
            display: flex;
            overflow: hidden;
        }

        #interactive-art-elements #snap-carousel .carousel {
            display: flex;
            flex-shrink: 0;
            width: auto;
        }

        #interactive-art-elements #snap-carousel .carousel-item {
            flex-shrink: 0;
            width: 100px;
        }

        #interactive-art-elements #snap-carousel .carousel-item:nth-child(2n) {
            width: 200px;
        }

        #interactive-art-elements #snap-carousel .carousel-item:nth-child(4n) {
            width: 280px;
        }

        #interactive-art-elements .flicker .carousel-item:not(:last-child) {
            margin-right: 10px;
        }

        #interactive-art-elements #map-props {
            overflow: initial;
            perspective: 1000px;
            touch-action: pan-x;
            width: 100%;
            height: calc((var(--one-cell) * 1));
            margin-top: 2rem;
            margin-bottom: 2rem;
        }

        #interactive-art-elements #map-props .carousel {
            position: relative;
            transform-style: preserve-3d;
            height: 100%;
        }

        #interactive-art-elements #map-props .carousel-item {
            pointer-events: none;
            position: absolute;
            transform-style: preserve-3d;
            left: 0;
            top: 0;
            width: min(25%, 105px);
            height: calc((var(--one-cell) * 1));
            border-radius: 10px;
            background: var(--yellow);
            backface-visibility: hidden;
        }

        #interactive-art-elements .form {
            top: 62px;
            left: 60px;
            background: var(--black);
            padding: 20px;
            box-shadow: 0 0 0 1px var(--red);
        }

        #interactive-art-elements .trigger {
            position: absolute;
            width: calc(var(--one-cell) * 3.2);
            height: calc(var(--one-cell) * 3.2);
            margin-left: calc(var(--one-cell) * -1.2);
            margin-top: calc(var(--one-cell) * -1.2);
            background: var(--yellow);
        }

        #interactive-art-elements #onsnap-callback {
            z-index: 3;
        }

        /* Drawer */
        #interactive-art-elements #toggle-drawer {
            position: absolute;
            z-index: 1;
            top: .5em;
            right: .5em;
            left: .5em;
            bottom: .5em;
            border-radius: .75em;
        }

        #interactive-art-elements .drawer {
            overscroll-behavior: contain;
            position: fixed; /* Keep fixed positioning relative to viewport */
            z-index: 999;
            bottom: 0;
            left: 0;
            right: 0;
            width: 100%;
            border-top-left-radius: .5rem;
            border-top-right-radius: .5rem;
            background-color: var(--red);
            will-change: transform;
            box-shadow: 0 500px 0 0 var(--red);
        }

        #interactive-art-elements .drawer-content {
            overflow: auto;
            overscroll-behavior: contain;
            position: relative;
            z-index: 0;
            max-height: calc(100svh - 2rem); /* Use svh for viewport height */
            padding: 3rem 2rem;
        }

        #interactive-art-elements .drawer-trigger {
            position: absolute;
            z-index: 1;
            width: 100%;
            height: 3rem;
            background-color: var(--red);
            border-top-left-radius: .5rem;
            border-top-right-radius: .5rem;
        }

        #interactive-art-elements .drawer-trigger::after {
            content: "";
            position: absolute;
            left: 50%;
            top: 50%;
            display: block;
            width: 5rem;
            height: .25rem;
            border-radius: .25rem;
            background-color: #FFF;
            transform: translate3d(-50%,-50%, 0);
        }

        #interactive-art-elements .drawer-content p,
        #interactive-art-elements .drawer-content button {
            margin-bottom: 10px;
        }

        #interactive-art-elements #nested-draggable {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: var(--yellow);
            margin-bottom: 10px;
            border-radius: .5rem;
        }

        /* Define CSS variables used in the provided CSS */
        body {
            --one-cell: 100px;
            --border-color: rgba(255,255,255,.75);
        }


    </style>
</head>
<body class="bg-gray-100">

    <label class="toggle">
        <input type="checkbox" />
        <div></div>
    </label>

    <header class="bg-white shadow-md">
        <div class="container mx-auto px-6 py-4 flex justify-between items-center">
            <a href="#" class="text-2xl font-bold text-gray-800">Gallery Name</a>

            <nav class="hidden md:flex space-x-6">
                <a href="#gallery" class="text-gray-600 hover:text-gray-800 transition duration-300">Gallery</a>
                <a href="#exhibitions" class="text-gray-600 hover:text-gray-800 transition duration-300">Exhibitions</a>
                 <a href="#mini-game" class="text-gray-600 hover:text-gray-800 transition duration-300">Mini Game</a>
                 <a href="#artistic-impression" class="text-gray-600 hover:text-gray-800 transition duration-300">Artistic Impression</a>
                 <a href="#interactive-art-elements" class="text-gray-600 hover:text-gray-800 transition duration-300">Interactive Elements</a> <a href="#about" class="text-gray-600 hover:text-gray-800 transition duration-300">About</a>
                <a href="#contact" class="text-gray-600 hover:text-gray-800 transition duration-300">Contact</a>
            </nav>

            <div class="md:hidden">
                <button class="text-gray-600 hover:text-gray-800 focus:outline-none">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path></svg>
                </button>
            </div>
        </div>
    </header>

    <section class="bg-cover bg-center h-96 flex items-center justify-center text-white reveal-on-scroll" style="background-image: url('https://placehold.co/1920x600/60a5fa/ffffff?text=Featured+Artwork+Here');">
        <div class="text-center bg-black bg-opacity-50 p-8 rounded-lg">
            <h1 class="text-4xl md:text-5xl font-bold mb-4">Discover Exquisite Art</h1>
            <p class="text-xl mb-6">Explore our collection and upcoming exhibitions.</p>
            <a href="#gallery" class="bg-white text-gray-800 px-6 py-3 rounded-full font-semibold hover:bg-gray-200 transition duration-300">View Gallery</a>
        </div>
    </section>

    <section id="gallery" class="py-16 bg-white reveal-on-scroll">
        <div class="container mx-auto px-6">
            <h2 class="text-3xl md:text-4xl font-bold text-center mb-12">Our Collection</h2>

            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">

                <div class="gallery-item bg-gray-100 rounded-lg shadow-md cursor-pointer">
                    <img src="https://placehold.co/600x400/e2e8f0/333?text=Artwork+1" alt="Artwork Title 1" class="w-full h-48 object-cover rounded-t-lg">
                    <div class="p-4">
                        <h3 class="text-lg font-semibold mb-1">Artwork Title 1</h3>
                        <p class="text-sm text-gray-600">Artist Name</p>
                    </div>
                </div>

                 <div class="gallery-item bg-gray-100 rounded-lg shadow-md cursor-pointer">
                    <img src="https://placehold.co/600x400/cbd5e0/333?text=Artwork+2" alt="Artwork Title 2" class="w-full h-48 object-cover rounded-t-lg">
                    <div class="p-4">
                        <h3 class="text-lg font-semibold mb-1">Artwork Title 2</h3>
                        <p class="text-sm text-gray-600">Artist Name</p>
                    </div>
                </div>

                <div class="gallery-item bg-gray-100 rounded-lg shadow-md cursor-pointer">
                    <img src="https://placehold.co/600x400/a0aec0/333?text=Artwork+3" alt="Artwork Title 3" class="w-full h-48 object-cover rounded-t-lg">
                    <div class="p-4">
                        <h3 class="text-lg font-semibold mb-1">Artwork Title 3</h3>
                        <p class="text-sm text-gray-600">Artist Name</p>
                    </div>
                </div>

                 <div class="gallery-item bg-gray-100 rounded-lg shadow-md cursor-pointer">
                    <img src="https://placehold.co/600x400/718096/fff?text=Artwork+4" alt="Artwork Title 4" class="w-full h-48 object-cover rounded-t-lg">
                    <div class="p-4">
                        <h3 class="text-lg font-semibold mb-1">Artwork Title 4</h3>
                        <p class="text-sm text-gray-600">Artist Name</p>
                    </div>
                </div>

                <div class="gallery-item bg-gray-100 rounded-lg shadow-md cursor-pointer">
                    <img src="https://placehold.co/600x400/e2e8f0/333?text=Artwork+5" alt="Artwork Title 5" class="w-full h-48 object-cover rounded-t-lg">
                    <div class="p-4">
                        <h3 class="text-lg font-semibold mb-1">Artwork Title 5</h3>
                        <p class="text-sm text-gray-600">Artist Name</p>
                    </div>
                </div>

                 <div class="gallery-item bg-gray-100 rounded-lg shadow-md cursor-pointer">
                    <img src="https://placehold.co/600x400/cbd5e0/333?text=Artwork+6" alt="Artwork Title 6" class="w-full h-48 object-cover rounded-t-lg">
                    <div class="p-4">
                        <h3 class="text-lg font-semibold mb-1">Artwork Title 6</h3>
                        <p class="text-sm text-gray-600">Artist Name</p>
                    </div>
                </div>

                </div>
        </div>
    </section>

    <section id="about" class="py-16 bg-gray-200 reveal-on-scroll">
        <div class="container mx-auto px-6 grid grid-cols-1 md:grid-cols-2 gap-12 items-center">
            <div>
                <h2 class="text-3xl md:text-4xl font-bold mb-6">About Our Gallery</h2>
                <p class="mb-4">Welcome to [Gallery Name], a space dedicated to showcasing contemporary and classic art from around the world. We believe in the power of art to inspire, challenge, and connect people.</p>
                <p class="mb-4">Our collection features a diverse range of mediums and styles, reflecting the vibrant and ever-evolving art landscape. We host regular exhibitions, workshops, and events to engage with the community and support artists.</p>
                <a href="#contact" class="inline-block mt-4 bg-gray-800 text-white px-6 py-3 rounded-full font-semibold hover:bg-gray-700 transition duration-300">Visit Us</a>
            </div>

            <div>
                 <img src="https://placehold.co/600x400/a0aec0/fff?text=Gallery+Interior+or+Exhibition" alt="Gallery Interior" class="rounded-lg shadow-md w-full">
            </div>
        </div>
    </section>

    <section id="mini-game" class="py-16 text-center reveal-on-scroll">
        <div class="container mx-auto px-6">
            <h2 class="text-3xl md:text-4xl font-bold mb-8">Play Our Neon Game!</h2>
            <p class="text-lg mb-8">Click the squares to change their colors and create a dazzling display!</p>

            <div id="game-area" class="game-grid">
                </div>

             <button id="reset-game" class="game-button">Reset Game</button>
        </div>
    </section>

    <section id="artistic-impression" class="py-16 reveal-on-scroll">
        <div class="svg-container">
             <svg viewBox="0 0 1280 720">
                <mask id="maskLeft">
                    <rect x="-50%" width="100%" height="100%" fill="#fff"/>
                </mask>
                <mask id="maskRight">
                    <rect x="50%" width="100%" height="100%" fill="#fff"/>
                </mask>
                <g font-size="150">
                    <g mask="url(#maskLeft)" class="left">
                        <text x="50%" y="300" text-anchor="middle">ARTISTIC</text> </g>
                     <g mask="url(#maskRight)" class="right">
                        <text x="50%" y="300" text-anchor="middle">ARTISTIC</text> </g>
                     <g mask="url(#maskLeft)" class="left">
                        <text x="50%" y="450" text-anchor="middle">IMPRESSION</text> </g>
                     <g mask="url(#maskRight)" class="right">
                        <text x="50%" y="450" text-anchor="middle">IMPRESSION</text> </g>
                </g>
            </svg>
        </div>
    </section>

    <section id="interactive-art-elements" class="py-16 reveal-on-scroll">
        <div class="section-container">
            <h2 class="text-3xl md:text-4xl font-bold mb-6">Interactive Art Elements</h2>
            <p class="text-lg mb-8">Explore different types of draggable and interactive elements.</p>

            <div id="draggables" class="grid">
                <div class="example">
                    <h2>Fixed (vel: <span id="log">0</span>)</h2>
                    <div id="fixed-container" class="example-content">
                        <div id="fixed" class="draggable rectangle">
                            <button id="toggle-drawer" class="button"><span>Toggle Drawer</span></button>
                        </div>
                    </div>
                </div>
                <div class="example">
                    <h2>Snap</h2>
                    <div class="example-content example-content-vertical">
                        <div id="body-snap" class="draggable rectangle"></div>
                    </div>
                </div>
                <div class="example">
                    <h2>Snap X</h2>
                    <div class="example-content example-content-vertical">
                        <div class="range margin range-x">
                            <div class="draggable square"></div>
                        </div>
                    </div>
                </div>
                <div class="example">
                    <h2>Snap Y</h2>
                    <div class="example-content">
                        <div class="range margin range-y">
                            <div class="draggable square"></div>
                        </div>
                    </div>
                </div>
                <div class="example">
                    <h2>Container</h2>
                    <div class="example-content example-content-vertical">
                        <div id="container-no-scroll" class="container margin">
                            <div class="draggable square"></div>
                        </div>
                    </div>
                </div>
                <div class="example">
                    <h2>Container auto scroll</h2>
                    <div class="example-content example-content-vertical">
                        <div class="margin margin-overlay"></div>
                        <div id="container-scroll" class="container margin overflow">
                            <div class="scroller grid">
                                <div class="draggable square"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="example">
                    <h2>Transformed container</h2>
                    <div class="example-content example-content-vertical transformed-example">
                        <div class="margin margin-overlay"></div>
                        <div id="transformed-container" class="container overflow margin">
                            <div class="scroller grid">
                                <div class="draggable square"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="example">
                    <h2>Snap carousel</h2>
                    <div class="example-content example-content-vertical">
                        <div class="margin margin-overlay"></div>
                        <div id="snap-carousel" class="flicker container margin">
                            <ul class="carousel">
                                <a href="https://animejs.com" target="_blank" class="draggable carousel-item"></a>
                                <li class="draggable carousel-item"><a href="https://animejs.com" target="_blank" class="carousel-link"></a></li>
                                <a href="https://animejs.com" target="_blank" class="draggable carousel-item"></a>
                                <li class="draggable carousel-item"><a href="https://animejs.com" target="_blank" class="carousel-link"></a></li>
                                <a href="https://animejs.com" target="_blank" class="draggable carousel-item"></a>
                                <li class="draggable carousel-item"><a href="https://animejs.com" target="_blank" class="carousel-link"></a></li>
                                <a href="https://animejs.com" target="_blank" class="draggable carousel-item"></a>
                                <li class="draggable carousel-item"><a href="https://animejs.com" target="_blank" class="carousel-link"></a></li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="example">
                    <h2>Bounded flick</h2>
                    <div class="example-content example-content-vertical">
                        <div class="margin margin-overlay"></div>
                        <div id="bounded-flick" class="flicker container margin">
                            <ul class="carousel">
                                <li class="draggable carousel-item"></li>
                                <li class="draggable carousel-item"></li>
                                <li class="draggable carousel-item"></li>
                                <li class="draggable carousel-item"></li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="example">
                    <h2>Object target</h2>
                    <div class="example-content example-content-vertical">
                        <div class="margin margin-overlay"></div>
                        <div id="infinite-flick" class="flicker container margin">
                            <ul class="carousel">
                                <li class="draggable carousel-item">1</li>
                                <li class="draggable carousel-item">2</li>
                                <li class="draggable carousel-item">1</li>
                                <li class="draggable carousel-item">2</li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="example">
                    <h2>onSnap() callback</h2>
                    <div class="example-content example-content-vertical">
                        <div class="margin margin-overlay"></div>
                        <div id="onsnap-callback" class="container margin overflow">
                            <ul class="list">
                                <li class="draggable list-item"></li>
                                <li class="draggable list-item"></li>
                                <li class="draggable list-item"></li>
                                <li class="draggable list-item"></li>
                                <li class="draggable list-item"></li>
                                <li class="draggable list-item"></li>
                                <li class="draggable list-item"></li>
                                <li class="draggable list-item"></li>
                                <li class="draggable list-item"></li>
                                <li class="draggable list-item"></li>
                                <li class="draggable list-item"></li>
                            </ul>
                        </div>
                    </div>
                </div>

                <div class="example">
                    <h2>Array container</h2>
                    <div class="example-content example-content-vertical">
                        <div id="array-container" class="container margin">
                            <div class="draggable square"></div>
                        </div>
                    </div>
                </div>

                <div class="example">
                    <h2>Dynamic padding</h2>
                    <div class="example-content example-content-vertical">
                        <div class="range margin dynamic">
                            <div class="draggable bar bar-left"></div>
                            <div class="draggable bar bar-right"></div>
                            <div class="draggable square"></div>
                        </div>
                    </div>
                </div>

            </div>

            <div class="drawer">
                <div id="nested-draggable" class="draggable square"></div>
                <div class="drawer-trigger"></div>
                <div class="drawer-content">
                    <div id="map-props">
                        <ul class="carousel">
                            <li class="draggable carousel-item"></li>
                            <li class="draggable carousel-item"></li>
                            <li class="draggable carousel-item"></li>
                            <li class="draggable carousel-item"></li>
                            <li class="draggable carousel-item"></li>
                            <li class="draggable carousel-item"></li>
                            <li class="draggable carousel-item"></li>
                            <li class="draggable carousel-item"></li>
                            <li class="draggable carousel-item"></li>
                            <li class="draggable carousel-item"></li>
                            <li class="draggable carousel-item"></li>
                            <li class="draggable carousel-item"></li>
                        </ul>
                    </div>
                    <div class="carousel-buttons">
                        <button class="button carousel-prev">PREV</button>
                        <button class="button carousel-next">NEXT</button>
                    </div>
                    <p>
                        This is the drawer content. <a href="https://animejs.com">This is a link with a <span>span</span>.</a> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam iaculis cursus nisi sit amet pulvinar. This is the drawer content. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam iaculis cursus nisi sit amet pulvinar. This is the drawer content. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam iaculis cursus nisi sit amet pulvinar. This is the drawer content. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam iaculis cursus nisi sit amet pulvinar.
                    </p>
                    <p>
                        This is the drawer content. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam iaculis cursus nisi sit amet pulvinar. This is the drawer content. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam iaculis cursus nisi sit amet pulvinar. This is the drawer content. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam iaculis cursus nisi sit amet pulvinar. This is the drawer content. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam iaculis cursus nisi sit amet pulvinar.
                    </p>
                    <p>
                        This is the drawer content. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam iaculis cursus nisi sit amet pulvinar. This is the drawer content. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam iaculis cursus nisi sit amet pulvinar. This is the drawer content. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam iaculis cursus nisi sit amet pulvinar. This is the drawer content. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam iaculis cursus nisi sit amet pulvinar.
                    </p>
                    <p>
                        This is the drawer content. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam iaculis cursus nisi sit amet pulvinar. This is the drawer content. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam iaculis cursus nisi sit amet pulvinar. This is the drawer content. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam iaculis cursus nisi sit amet pulvinar. This is the drawer content. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam iaculis cursus nisi sit amet pulvinar.
                    </p>
                </div>
            </div>
        </div>
    </section>


     <section id="contact" class="py-16 bg-white reveal-on-scroll">
        <div class="container mx-auto px-6 text-center">
            <h2 class="text-3xl md:text-4xl font-bold mb-8">Get in Touch</h2>
            <p class="text-lg mb-4">Have questions or want to inquire about an artwork?</p>
            <p class="text-lg mb-8">Email: info@galleryname.com | Phone: (123) 456-7890</p>
            <a href="mailto:info@galleryname.com" class="inline-block bg-blue-500 text-white px-8 py-3 rounded-full font-semibold hover:bg-blue-600 transition duration-300">Email Us</a>
        </div>
    </section>


    <footer class="bg-gray-800 text-gray-300 py-8 reveal-on-scroll">
        <div class="container mx-auto px-6 text-center">
            <p>&copy; 2025 Gallery Name. All rights reserved.</p>
            <div class="flex justify-center space-x-6 mt-4">
                <a href="#" class="text-gray-400 hover:text-white transition duration-300">Privacy Policy</a>
                <a href="#" class="text-gray-400 hover:text-white transition duration-300">Terms of Service</a>
            </div>
        </div>
    </footer>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/Draggable.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/MotionPathPlugin.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/ScrollTrigger.min.js"></script>

    <script src="https://assets.codepen.io/1137/anime.esm.min.js" type="module"></script>


    <script type="module">
        // Placeholder for potential JavaScript interactions
        // For example, you could add a modal here to show larger artwork images when clicked.

        // Example: Add click listener to gallery items (basic example)
        document.querySelectorAll('.gallery-item').forEach(item => {
            item.addEventListener('click', () => {
                const artworkTitle = item.querySelector('h3').textContent;
                const artistName = item.querySelector('p').textContent;
                const imageUrl = item.querySelector('img').src;

                // In a real application, you would open a modal here
                console.log(`Clicked on: ${artworkTitle} by ${artistName}`);
                // alert(`Imagine a modal showing ${artworkTitle} by ${artistName} here!`); // Use a custom message box instead of alert
                 showMessage(`You clicked on "${artworkTitle}" by ${artistName}. Imagine a detailed view here!`);
            });
        });

         // Simple custom message box function (replaces alert)
         function showMessage(message) {
            const messageBox = document.createElement('div');
            messageBox.classList.add(
                'fixed', 'top-1/2', 'left-1/2', 'transform', '-translate-x-1/2', '-translate-y-1/2',
                'bg-white', 'p-6', 'rounded-lg', 'shadow-xl', 'z-50', 'text-center',
                'max-w-sm', 'w-full', 'text-gray-800'
            );
            messageBox.innerHTML = `
                <p class="text-lg font-semibold mb-4">${message}</p>
                <button class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600" onclick="this.parentElement.remove()">Close</button>
            `;
            document.body.appendChild(messageBox);
        }


        // Mini-Game JavaScript Logic
        const gameArea = document.getElementById('game-area');
        const resetButton = document.getElementById('reset-game');
        const numberOfSquares = 40; // Number of squares in the game grid
        const colors = ['color-1', 'color-2', 'color-3', 'color-4', 'color-5']; // CSS classes for neon colors

        // Function to create the game grid
        function createGameGrid() {
            gameArea.innerHTML = ''; // Clear existing squares
            for (let i = 0; i < numberOfSquares; i++) {
                const square = document.createElement('div');
                square.classList.add('game-square');
                // Optionally add a random initial color
                // const randomColorClass = colors[Math.floor(Math.random() * colors.length)];
                // square.classList.add(randomColorClass);
                gameArea.appendChild(square);
            }
        }

        // Function to handle square clicks
        function handleSquareClick(event) {
            const clickedSquare = event.target;
            if (clickedSquare.classList.contains('game-square')) {
                // Find the current color class
                let currentColorClass = null;
                for (const colorClass of colors) {
                    if (clickedSquare.classList.contains(colorClass)) {
                        currentColorClass = colorClass;
                        break;
                    }
                }

                // Determine the next color class
                let nextColorClass;
                if (currentColorClass) {
                    const currentIndex = colors.indexOf(currentColorClass);
                    const nextIndex = (currentIndex + 1) % colors.length;
                    nextColorClass = colors[nextIndex];
                    clickedSquare.classList.remove(currentColorClass); // Remove current
                } else {
                    // If no color class, add the first one
                    nextColorClass = colors[0];
                }

                // Add the next color class
                clickedSquare.classList.add(nextColorClass);
            }
        }

        // Initialize the game grid on page load
        window.addEventListener('load', () => {
            createGameGrid();
        });

        // Add event listener to the game area for clicks (event delegation)
        gameArea.addEventListener('click', handleSquareClick);

        // Add event listener for the reset button
        resetButton.addEventListener('click', () => {
            createGameGrid(); // Recreate the grid to reset colors
        });


        // Reveal on Scroll JavaScript Logic
        const sectionsToReveal = document.querySelectorAll('.reveal-on-scroll');

        const revealObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                // If the element is in the viewport
                if (entry.isIntersecting) {
                    entry.target.classList.add('is-visible'); // Add the visible class

                    // Check if the revealed element is the Artistic Impression section (original SVG)
                    if (entry.target.id === 'artistic-impression') {
                        // Play the GSAP timelines when the section is visible
                        if (window.artisticImpressionTimeline1 && window.artisticImpressionTimeline2) {
                             window.artisticImpressionTimeline2.play();
                             window.artisticImpressionTimeline1.play();
                        }
                    }

                    // Check if the revealed element is the Interactive Art Elements section (new section)
                    if (entry.target.id === 'interactive-art-elements') {
                         // The JS for this section is loaded as a module,
                         // and its initialization logic should ideally run
                         // when the section is visible. However, the provided JS
                         // initializes immediately on script load.
                         // If specific animations need to trigger on reveal,
                         // that logic would need to be added here, potentially
                         // by calling functions exposed by the module script.
                         console.log("Interactive Art Elements section revealed.");
                         // As a simple example, you could trigger an animation here
                         // if the module script exposed a function like initInteractiveAnimations()
                         // if (typeof initInteractiveAnimations === 'function') {
                         //     initInteractiveAnimations();
                         // }
                    }


                    observer.unobserve(entry.target); // Stop observing once visible
                }
            });
        }, {
            threshold: 0.1 // Trigger when 10% of the element is visible
        });

        // Observe each section that needs to be revealed
        sectionsToReveal.forEach(section => {
            revealObserver.observe(section);
        });


        // Artistic Impression SVG Animation Logic (Original)
        let artisticImpressionTimeline1;
        let artisticImpressionTimeline2;

        if (typeof gsap !== 'undefined') {
            const artisticImpressionSection = document.getElementById('artistic-impression');
            if (artisticImpressionSection) { // Check if the section exists
                const leftRights = artisticImpressionSection.querySelectorAll('.left, .right');
                const allTexts = artisticImpressionSection.querySelectorAll('text');

                artisticImpressionTimeline1 = gsap.timeline({
                    defaults: {
                        duration: 4,
                        ease: 'power2.inOut'
                    },
                    repeat: -1,
                    yoyo: true,
                    paused: true
                });

                artisticImpressionTimeline1.fromTo(leftRights, {
                    skewY: (i) => [-30, 15][i],
                    scaleX: (i) => [0.6, 0.85][i],
                    x: 200
                }, {
                    skewY: (i) => [-15, 30][i],
                    scaleX: (i) => [0.85, 0.6][i],
                    x: -200
                });

                artisticImpressionTimeline2 = gsap.timeline({
                     paused: true
                });

                artisticImpressionTimeline2.fromTo(allTexts, {
                     xPercent: -100,
                     opacity: 0
                }, {
                    duration: 1,
                    xPercent: 0,
                    opacity: 1,
                    ease: 'sine.inOut',
                    stagger: 0.2
                });

                window.artisticImpressionTimeline1 = artisticImpressionTimeline1;
                window.artisticImpressionTimeline2 = artisticImpressionTimeline2;
            }


        } else {
            console.error("GSAP library not loaded. Original Artistic Impression animation will not work.");
        }

        // JavaScript for the Light/Dark Toggle and View Transition (from previous update)
        // This script is now placed outside the type="module" script tag
        // to avoid conflicts with the imported module script.
        document.addEventListener('DOMContentLoaded', () => {
            const toggleInput = document.querySelector('.toggle input');
            const rootElement = document.documentElement;

            const applyTheme = (isDark) => {
                if (isDark) {
                    rootElement.classList.add('dark');
                } else {
                    rootElement.classList.remove('dark');
                }
            };

            const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
            toggleInput.checked = prefersDark;
            applyTheme(prefersDark);


            toggleInput.addEventListener('input', (event) => {
                const isDark = toggleInput.checked;

                let x = window.innerWidth / 2;
                let y = window.innerHeight / 2;

                const toggleElement = document.querySelector('.toggle');

                if (toggleElement) {
                    const rect = toggleElement.getBoundingClientRect();
                    x = rect.left + rect.width / 2;
                    y = rect.top + rect.height / 2;
                }

                if (!document.startViewTransition) {
                    console.warn("View Transition API not supported. Falling back.");
                    applyTheme(isDark);
                    return;
                }

                const transition = document.startViewTransition(() => {
                    applyTheme(isDark);
                });

                transition.ready.then(() => {
                    rootElement.style.setProperty('--x', `${x}px`);
                    rootElement.style.setProperty('--y', `${y}px`);
                }).catch(error => {
                    console.error("Error during View Transition setup:", error);
                });

                transition.finished.then(() => {
                    console.log("Transition finished.");
                    rootElement.style.removeProperty('--x');
                    rootElement.style.removeProperty('--y');
                }).catch(error => {
                    console.error("Error during View Transition finish:", error);
                });

            });

        });


    </script>

    <script type="module">
        // Import necessary functions from the library
        import {
            animate,
            createTimer,
            createDraggable,
            createAnimatable,
            utils,
            stagger,
            eases,
            createSpring,
            createTimeline,
            engine,
        } from 'https://assets.codepen.io/1137/anime.esm.min.js';

        // Set time unit for the engine
        engine.timeUnit = 'ms';

        // Get the log element
        const logElement = document.getElementById('log');
        const $log = logElement ? [logElement] : []; // Handle case where log element might not exist


        // Fixed Draggable
        const fixedDraggableElement = document.getElementById('fixed');
        if (fixedDraggableElement) {
             createDraggable(fixedDraggableElement, {
                container: document.body,
                onDrag: self => {
                    if ($log[0]) {
                        $log[0].innerHTML = `${utils.round(self.velocity, 3)}`;
                    }
                }
            });
        }


        // Drawer Logic
        let scrollTop, scrollStyles;

        function blockScrolling() {
            if (scrollStyles) return;
            const $scroll = document.scrollingElement;
            scrollTop = $scroll.scrollTop;
            scrollStyles = utils.set([document.documentElement, $scroll], {
                overflow: 'hidden', position: 'sticky', height: window.innerHeight - 1 + 'px'
            });
        }

        function enableScrolling() {
            if (!scrollStyles) return;
            scrollStyles.revert();
            scrollStyles = null;
            window.scrollTo({ top: scrollTop, behavior: 'instant' });
        }

        const drawerElement = document.querySelector('.drawer');
        const $drawer = drawerElement ? [drawerElement] : [];

        if ($drawer[0]) {
            const drawerOpenAnim = createTimeline({
                autoplay: false,
                defaults: { ease: 'linear' }
            })
            .add('#draggables', {
                y: [10, 0],
                scale: $el => [1 - (20 / $el.offsetWidth), 1],
                borderRadius: ['.5rem', 0],
                opacity: [.5, 1],
            }, 0)
            .add(document.body, {
                backgroundColor: { from: '#000' },
            }, 0)
            .add($drawer[0], {
                opacity: [1, 0],
                duration: 10,
                delay: 990,
                ease: 'out(4)',
            }, 0);

            const drawer = createDraggable($drawer[0], {
                container: () => [0, $drawer[0].offsetWidth, $drawer[0].offsetHeight, 0],
                y: { snap: ({ $target }) => $target.offsetHeight },
                x: false,
                velocityMultiplier: 4,
                containerFriction: 1,
                onUpdate: (self) => {
                    drawerOpenAnim.progress = self.progressY;
                    self.progressY < .95 ? blockScrolling() : enableScrolling();
                },
                onResize: (self) => {
                    self.progressY = self.progressY > .5 ? 1 : 0
                }
            });

            const toggleDrawerButton = document.getElementById('toggle-drawer');
            if (toggleDrawerButton) {
                toggleDrawerButton.onclick = () => {
                    drawer.stop();
                    animate(drawer, {
                        progressY: drawer.y < 100 ? 1 : 0,
                        duration: 375,
                        ease: 'out(4)',
                    });
                }
            }

            drawer.progressY = 1; // Initialize drawer state
        }


        // Nested Draggable
        const nestedDraggableElement = document.getElementById('nested-draggable');
        if (nestedDraggableElement) {
             createDraggable(nestedDraggableElement, {
                container: '.drawer',
            });
        }


        // Body Snap Draggable
        const bodySnapElement = document.getElementById('body-snap');
        if (bodySnapElement) {
            createDraggable(bodySnapElement, {
                container: document.body,
                x: { snap: 200 },
                y: { snap: 100 },
            });
        }


        // Range X Draggable
        const rangeXDraggable = document.querySelector('.range-x .draggable');
        const $rangeX = rangeXDraggable ? [rangeXDraggable] : [];

        if ($rangeX[0]) {
            const rangeX = createDraggable($rangeX[0], {
                container: '.range-x',
                containerPadding: 10,
                snap: 200,
                y: false,
                onGrab: () => animateRangeX.pause(),
                onSettle: () => {
                    animateRangeX.refresh().restart();
                }
            });

            const animateRangeX = animate(rangeX, {
                progressX: el => el.progressX > .5 ? 0 : 1,
                duration: 1500,
                ease: 'inOut(3)',
                onLoop: self => self.refresh()
            });
        }


        // Range Y Draggable
        const rangeYDraggable = document.querySelector('.range-y .draggable');
        if (rangeYDraggable) {
             createDraggable(rangeYDraggable, {
                container: '.range-y',
                containerPadding: 10,
                snap: 200,
                x: false,
                cursor: { onHover: 'ns-resize', onGrab: 'move' },
                releaseEase: createSpring({
                    mass: 1,
                    stiffness: 400,
                    damping: 30
                }),
            });
        }


        // Container No Scroll Draggable
        const containerNoScrollDraggable = document.querySelector('#container-no-scroll .draggable');
        if (containerNoScrollDraggable) {
            createDraggable(containerNoScrollDraggable, {
                container: '#container-no-scroll',
                containerPadding: 10,
            });
        }


        // Container Auto Scroll Draggable
        const containerScrollDraggable = document.querySelector('#container-scroll .draggable');
        if (containerScrollDraggable) {
            createDraggable(containerScrollDraggable, {
                container: '#container-scroll',
                containerPadding: 10,
                scrollThreshold: 10,
            });
        }


        // Transformed Container Draggable
        const transformedContainerDraggable = document.querySelector('#transformed-container .draggable');
        if (transformedContainerDraggable) {
            createDraggable(transformedContainerDraggable, {
                container: '#transformed-container',
                containerPadding: 10,
            });
        }


        // Bounded Flick Carousel
        const boundedFlickItems = utils.$('#bounded-flick .carousel-item');
        if (boundedFlickItems.length > 0) {
            const boundedFlickLength = boundedFlickItems.length;
            const boundedFlickWidth = 290; // Assuming a fixed width based on example context

            const boundedFlicker = createDraggable('#bounded-flick .carousel', {
                container: [0, 0, 0, -boundedFlickWidth * (boundedFlickLength - 1)],
                y: false,
                snap: boundedFlickWidth,
            });

            utils.set('#bounded-flick .carousel', {
                width: `${boundedFlickLength * boundedFlickWidth - 10}`
            });
        }


        // Snap Carousel
        const snapCarouselElement = document.getElementById('snap-carousel');
        const snapCarouselItems = utils.$('#snap-carousel .carousel-item');

        if (snapCarouselElement && snapCarouselItems.length > 0) {
            const snapTo = snapCarouselItems.map($el => -$el.offsetLeft);

            createDraggable(snapCarouselElement.querySelector('.carousel'), {
                trigger: '#snap-carousel',
                x: { modifier: utils.wrap(snapTo[Math.floor(snapTo.length / 2)], 0) }, // Use Math.floor for index
                y: false,
                snap: snapTo,
            });
        }


        // Object Target (Infinite Flick)
        const flickCarouselElement = document.getElementById('infinite-flick');
        const flickItems = utils.$('#infinite-flick .carousel-item');

        if (flickCarouselElement && flickItems.length > 0) {
            const $flickCarousel = flickCarouselElement.querySelector('.carousel');
            const flickLength = flickItems.length;
            const flickData = { width: 290, speedX: 2, wheelY: 0 }; // Assuming width

            utils.set($flickCarousel, { width: `${flickLength * flickData.width - 10}` });

            const flickAnimatable = createAnimatable($flickCarousel, {
                x: 0,
                modifier: utils.wrap(-flickData.width * (flickLength / 2), 0),
            });

            const flickDraggable = createDraggable(flickData, {
                trigger: '#infinite-flick',
                y: false,
                onGrab: () => animate(flickData, { speedX: 0, duration: 500 }),
                onRelease: () => animate(flickData, { speedX: 2, duration: 500 }),
                releaseStiffness: 10,
            });

            createTimer({
                onUpdate: () => {
                    const { x } = flickAnimatable;
                    // Check if x is a function before calling it
                    if (typeof x === 'function') {
                         x(x() - flickData.speedX + flickDraggable.deltaX - flickData.wheelY);
                    }
                }
            });

            // Support mousewheel
            const wheelDeltaAnim = animate(flickData, {
                wheelY: () => 0,
                duration: 500,
                autoplay: false,
            });

            function onWheel(e) {
                e.preventDefault();
                flickData.wheelY = utils.lerp(flickData.wheelY, e.deltaY, .2);
                wheelDeltaAnim.refresh().restart()
            }

            $flickCarousel.addEventListener('wheel', onWheel, { passive: false });
        }


        // Draggable List (onSnap() callback)
        const onsnapCallbackElement = document.getElementById('onsnap-callback');
        const listItems = utils.$('#onsnap-callback .draggable');

        if (onsnapCallbackElement && listItems.length > 0) {
            const list = [];
            const snap = 60; // Assuming snap value

            let bodySticky;

            listItems.forEach(($listItem, itemIndex) => {
                const draggable = createDraggable($listItem, {
                    container: '#onsnap-callback',
                    x: false,
                    containerPadding: 10,
                    snap,
                    onGrab: self => {
                        animate(self.$target, { scale: 1.05, duration: 350 });
                        // Check if document.scrollingElement exists before setting sticky position
                        if (document.scrollingElement) {
                             bodySticky = utils.set(document.scrollingElement, { position: 'sticky' }); // Hack for Safari mobile
                        }
                    },
                    onRelease: self => {
                        animate(self.$target, { scale: 1.00, duration: 450 });
                        if (bodySticky) {
                            bodySticky.revert();
                        }
                    },
                    onSnap: self => {
                        const fromIndex = list.indexOf(self);
                        const toIndex = utils.round(0).clamp(0, list.length - 1)(self.destY / snap);
                        if (toIndex !== fromIndex) {
                            list.splice(fromIndex, 1);
                            list.splice(toIndex, 0, self);
                            list.forEach((item, i) => {
                                if (i !== toIndex) {
                                    animate(item, {
                                        y: i * snap,
                                        duration: 750,
                                        ease: eases.outElastic(.8, 1)
                                    });
                                }
                            });
                        }
                    }
                });
                draggable.y = itemIndex * snap;
                utils.set($listItem, { willChange: 'transform', z: 10 });
                list.push(draggable);
            });

            utils.set('#onsnap-callback .list', { height: `${list.length * snap - 10}` });
        }


        // Array Container Draggable
        const arrayContainerDraggable = document.querySelector('#array-container .draggable');
        if (arrayContainerDraggable) {
            createDraggable(arrayContainerDraggable, {
                container: [0, 200, 200, 0], // Assuming container bounds from example
                containerPadding: 50,
            });
        }


        // Dynamic Values Draggables
        const dynamicElements = utils.$('.dynamic .draggable');
        if (dynamicElements.length > 0) {
            const dynamicDraggables = dynamicElements.map($el => {
                return createDraggable($el, {
                    container: '.dynamic',
                    containerPadding: 10,
                    snap: 1,
                    containerFriction: 1,
                });
            });

            const [ left, right, center ] = dynamicDraggables;

            // Set the initial padding values, check if elements exist
            if (left && right && center) {
                 left.containerPadding[1] = 100; // Assuming initial padding
                 right.containerPadding[3] = 100; // Assuming initial padding
                 center.parameters.containerPadding = () => [10, Math.abs(right.x - 10), 10, left.x + 10];
                 center.refresh();

                 // Update center and right padding on left drag
                 left.onUpdate = ({ x }) => {
                     if (right) right.containerPadding[3] = x + 90;
                     if (center) center.refresh();
                 }

                 // Update center and left padding on right drag
                 right.onUpdate = ({ x }) => {
                      if (left) left.containerPadding[1] = Math.abs(x - 90);
                      if (center) center.refresh();
                 }
            }
        }


    </script>

</body>
</html>
